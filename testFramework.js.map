{
  "version": 3,
  "file": "testFramework.js",
  "sourceRoot": "",
  "sources": [
    "src\\testFramework.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "{logInfo, logError, isFunction} = require './common'\r\nlogFail = (description) => (e) =>\r\n  logError \"Test #{description} failed with message: #{e.message}\"\r\n  false\r\n\r\nTest = (description) =>\r\n  fail = logFail description\r\n  assertBy = AssertBy do Asserts\r\n\r\n  (testFn) =>\r\n    flag = true\r\n    failPass = (e) =>\r\n      flag = false\r\n      fail e\r\n      throw e\r\n    report = (o) =>\r\n      if flag\r\n        Promise.resolve o\r\n        .then (o) => await assertBy o\r\n        .catch failPass\r\n        .then => flag\r\n      else throw o\r\n    Promise.resolve()\r\n    .then => await testFn report\r\n    .then (o) =>\r\n      if flag\r\n        await assertBy o\r\n      else throw o\r\n    .then =>\r\n      if flag then logInfo \"Test #{description} passed\"\r\n      flag\r\n    .catch fail\r\n\r\nassert = (flag) =>\r\n  if not flag then throw new Error 'assert failed'\r\n  flag\r\n\r\nassertSeq = =>\r\n  count = -Infinity\r\n  (c) =>\r\n    if count > c\r\n      throw new Error 'wrong sequence'\r\n    else\r\n      if isFinite(c) or c is Infinity then count = +c\r\n      true\r\n\r\nAssertBy = (asserts) => (o) =>\r\n  p = []\r\n  for key, value of o when isFunction asserts[key]\r\n    p.push Promise.resolve asserts[key] value\r\n  Promise.all p\r\n  .then (res) => res.every (flag) => !!flag\r\n  .then assert\r\n\r\nAsserts = => {assert, seq: do assertSeq}\r\n\r\nmodule.exports = Test"
  ]
}