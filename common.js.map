{
  "version": 3,
  "file": "common.js",
  "sourceRoot": "",
  "sources": [
    "src\\common.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;;IAAA,UAAA,EAAA,CAAA,EAAA,WAAA,EAAA,IAAA,EAAA,QAAA,EAAA,UAAA,EAAA,KAAA,EAAA,UAAA,EAAA,SAAA,EAAA,QAAA,EAAA,kBAAA,EAAA,KAAA,EAAA,YAAA,EAAA,WAAA,EAAA,YAAA,EAAA,SAAA,EAAA,UAAA,EAAA,MAAA,EAAA,OAAA,EAAA,WAAA,EAAA,WAAA,EAAA,QAAA,EAAA,WAAA,EAAA,cAAA,EAAA,UAAA,EAAA,WAAA,EAAA,mBAAA,EAAA,UAAA,EAAA,eAAA,EAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,eAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAAA,MAAA,EAAA,OAAA,EAAA,eAAA,EAAA,OAAA,EAAA,IAAA,EAAA,OAAA,EAAA,SAAA,EAAA,WAAA,EAAA,KAAA,EAAA,QAAA,EAAA,GAAA,EAAA;;AAAA,QAAA,GAAW,CAAC,CAAD,CAAA,GAAA;SAAO;AAAP;;AACX,IAAA,GAAO,CAAA,CAAA,GAAA;SAAG;AAAH;;AAEP,MAAA,GAAS,CAAC,IAAD,CAAA,GAAA;SAAU,CAAC,CAAD,CAAA,GAAA;WAAO,OAAO,CAAP,KAAY;EAAnB;AAAV;;AACT,QAAA,GAAW,MAAA,CAAO,QAAP;;AACX,UAAA,GAAa,MAAA,CAAO,UAAP;;AAEb,SAAA,GAAY,CAAC,GAAD,EAAM,GAAN,CAAA,GAAA;SAAc,GAAG,CAAC,MAAJ,CAAc,KAAK,CAAC,OAAN,CAAc,GAAd,CAAH,GAA0B,GAA1B,GAAmC,CAAC,GAAD,CAA9C;AAAd;;AAEZ,SAAA,GAAY,CAAC,MAAM,EAAP,CAAA,GAAA;SAAc,GAAG,CAAC,MAAJ,CAAW,SAAX,EAAsB,EAAtB;AAAd;;AAEZ,UAAA,GAAa,CAAC,CAAD,CAAA,GAAA;AACb,MAAA,GAAA,EAAA;EAAE,GAAA,GAAM,CAAA;EACN,KAAA,QAAA;QAAkB,gBAAA,IAAY,CAAC,CAAC,cAAF,CAAiB,GAAjB;MAC5B,IAAG,CAAC,QAAA,CAAS,CAAC,CAAC,GAAD,CAAV,CAAD,CAAA,IAAsB,CAAC,CAAI,KAAK,CAAC,OAAN,CAAc,CAAC,CAAC,GAAD,CAAf,CAAL,CAAzB;QACE,MAAM,CAAC,MAAP,CAAc,GAAd,EAAmB,UAAA,CAAW,CAAC,CAAC,GAAD,CAAZ,CAAnB,EADF;OAAA,MAEK,IAAO,gBAAP;QAAsB,GAAG,CAAC,GAAD,CAAH,GAAW,CAAC,CAAC,GAAD,EAAlC;;;EAHP;SAIA;AANW,EAXb;;;AAoBA,UAAA,GAAa,CAAC,CAAD,CAAA,GAAA;EACX,IAAG,CAAI,UAAA,CAAW,CAAX,CAAP;IACE,MAAM,IAAI,SAAJ,CAAc,4BAAd,EADR;;SAEA,CAAA,GAAI,IAAJ,CAAA,GAAA;AACF,QAAA,CAAA,EAAA;IAAI,CAAA,GAAI,CAAA,CAAE,GAAG,IAAL;IACJ,CAAA,GAAI,CAAA,CAAE,GAAG,IAAI,CAAC,OAAL,CAAA,CAAL;WACJ,CAAA,KAAK;EAHP;AAHW;;AAQb,UAAA,GAAa,CAAC,CAAD,CAAA,GAAA;SAAO,QAAA,CAAS,CAAT,CAAA,IAAgB,CAAC,CAAC,MAAM,CAAC,QAAR;AAAxB;;AACb,WAAA,GAAc,CAAC,CAAD,CAAA,GAAA;SAAO,CAAC,CAAC,MAAM,CAAC,QAAR,CAAD,CAAA;AAAP;;AACd,eAAA,GAAkB,CAAC,CAAD,CAAA,GAAA;SAAO,UAAA,CAAW,CAAX,CAAA,IAAkB,CAAI,UAAA,CAAW,WAAX,CAAA,CAAwB,CAAxB;AAA7B;;AAClB,eAAA,GAAkB,CAAC,SAAA,CAAA,CAAA;SAAG,CAAA,KAAA;AAAH,CAAD,CAAU,CAAC,SAAS,CAAC;;AACvC,WAAA,GAAc,CAAC,CAAD,CAAA,GAAA;SAAO,CAAA,IAAM,CAAC,CAAC,WAAF,KAAiB;AAA9B;;AACd,mBAAA,GAAsB,CAAC,CAAD,CAAA,GAAA;SAAO,CAAA,IAAM,CAAC,CAAC,MAAM,CAAC,WAAR,CAAD,KAAyB;AAAtC;;AAEtB,OAAA,GAAU,CAAC,IAAD,CAAA,GAAA;SAAU,SAAA,CAAC,IAAD,CAAA;AACpB,QAAA,IAAA,EAAA,OAAA,EAAA;AAAE;IAAA,KAAA,YAAA;MACE,CAAA,GAAI,IAAA,CAAK,IAAL;MACJ,IAAG,UAAA,CAAW,CAAX,CAAH;qBACE,CAAA,KAAA,CAAA,GAAO,GADT;OAAA,MAAA;qBAGE,CAAA,MAAM,CAAN,GAHF;;IAFF,CAAA;;EADkB;AAAV;;AAQV,GAAA,GAAM,CAAC,CAAD,CAAA,GAAA;EACJ,IAAG,CAAI,mBAAA,CAAoB,CAApB,CAAP;IACE,MAAM,IAAI,SAAJ,CAAc,qCAAd,EADR;;SAEA,CAAA,GAAI,IAAJ,CAAA,GAAA;AACF,QAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA;IAAI,CAAA,GAAI,CAAA,CAAE,GAAG,IAAL;AACJ,WAAA,IAAA;MACE,CAAA,CAAC,KAAD,EAAQ,IAAR,CAAA,GAAgB,CAAC,CAAC,IAAF,CAAA,CAAhB;MACA,IAAG,WAAA,CAAY,KAAZ,CAAH;QACE,CAAA,GAAI,MADN;OAAA,MAEK,IAAG,IAAH;AACH,cADG;OAAA,MAAA;QAEA,GAAA,GAAM,MAFN;;IAJP;WAOA;EATF;AAHI,EA3CN;;;;;;;;;;;AAkEA,CAAA,GAAO,CAAA,CAAA,CAAA,GAAA;AACP,MAAA,OAAA,EAAA,MAAA;;;EAEE,OAAA,GAAU,QAAA,CAAC,WAAD,EAAc,UAAd,CAAA;IACR,IAAG,WAAA,IAAgB,CAAI,UAAA,CAAW,WAAX,CAAvB;MACE,MAAM,IAAI,SAAJ,CAAc,wCAAd,EADR;;IAEA,IAAG,UAAA,IAAe,CAAI,UAAA,CAAW,UAAX,CAAtB;MACE,MAAM,IAAI,SAAJ,CAAc,uCAAd,EADR;;IAEA,IAAG,WAAA,IAAe,UAAlB;aACE,CAAA,CAAE,CAAA,GAAI,IAAJ,CAAA,GAAA;eAAa,IAAA,CAAE,GAAG,IAAL,CAAU,CAAC,IAAX,CAAgB,WAAhB,EAA6B,UAA7B;MAAb,CAAF,EADF;KAAA,MAAA;MAGE,MAAM,IAAI,SAAJ,CAAc,kDAAd,EAHR;;EALQ;EAUV,MAAA,GAAS,QAAA,CAAC,UAAD,CAAA;WAAgB,IAAC,CAAA,IAAD,CAAM,IAAN,EAAY,UAAZ;EAAhB;SAET,CAAC,CAAD,CAAA,GAAA;AACF,QAAA,EAAA,EAAA;IAAI,IAAG,CAAI,UAAA,CAAW,CAAX,CAAP;MACE,EAAA,GAAK;MACL,CAAA,GAAI,CAAA,CAAA,GAAA;eAAG;MAAH,EAFN;;IAGA,IAAG,UAAA,CAAW,CAAC,CAAC,IAAb,CAAA,IAAuB,UAAA,CAAW,CAAC,CAAC,KAAb,CAA1B;AACE,aAAO,EADT;;IAEA,CAAA,GAAI,MAAA,QAAA,CAAA,GAAI,IAAJ,CAAA;aACF,CAAA,MAAM,CAAA,CAAE,GAAG,IAAL,CAAN;IADE;WAEJ,MAAM,CAAC,MAAP,CAAc,CAAd,EAIE,CAAA;;;;MAAA,IAAA,EAAM,OAAO,CAAC,IAAR,CAAa,CAAb,CAAN;MACA,KAAA,EAAO,MAAM,CAAC,IAAP,CAAY,CAAZ;IADP,CAJF;EARF;AAfK,CAAA;;AA8BP,UAAA,GAAa,CAAC,CAAD,EAAI,IAAJ,CAAA,GAAA;SAAa,CAAC,CAAC,IAAD,CAAM,CAAC,IAAR,CAAa,CAAb;AAAb;;AAEb,UAAA,GAAa,UAAA,CAAW,OAAX,EAAoB,KAApB;;AACb,WAAA,GAAc,UAAA,CAAW,OAAX,EAAoB,MAApB;;AAEd,WAAA,GAAc,CAAC,IAAD,CAAA,GAAA;SAAU,MAAA,QAAA,CAAA,GAAC,IAAD,CAAA;WAAa,CAAA,MAAM,IAAA,CAAK,GAAA,IAAL,CAAN;EAAb;AAAV;;AAEd,WAAA,GAAc,CAAC,IAAD,CAAA,GAAA;SAAU,CAAC,MAAM,EAAP,CAAA,GAAA;WAAc,IAAA,CAAK,GAAA,GAAL;EAAd;AAAV;;AACd,MAAA,GAAS,CAAC,IAAD,CAAA,GAAA;SAAU,CAAC,GAAD,CAAA,GAAA;WAAS,GAAG,CAAC,GAAJ,CAAQ,IAAR;EAAT;AAAV;;AACT,WAAA,GAAc,CAAC,EAAD,CAAA,GAAA;SAAQ,CAAC,KAAK,EAAN,CAAA,GAAA;WAAa,EAAE,CAAC,GAAH,CAAO,CAAC,CAAD,EAAI,CAAJ,CAAA,GAAA;aAAU,CAAA,CAAE,EAAE,CAAC,CAAD,CAAJ;IAAV,CAAP;EAAb;AAAR;;AACd,cAAA,GAAiB,CAAC,SAAD,CAAA,GAAA;SAAe,CAAC,KAAD,CAAA,GAAA;AAChC,QAAA,EAAA,EAAA;IAAE,IAAG,CAAI,KAAK,CAAC,OAAN,CAAc,KAAd,CAAP;MACE,MAAM,IAAI,SAAJ,CAAc,2BAAd,EADR;;IAEA,IAAG,kBAAI,KAAK,CAAE,gBAAd;MACE,MAAM,IAAI,SAAJ,CAAc,oBAAd,EADR;;IAEA,IAAG,CAAI,KAAK,CAAC,KAAN,CAAY,UAAZ,CAAP;MACE,MAAM,IAAI,SAAJ,CAAc,gCAAd,EADR;;IAEA,CAAA,GAAI,CAAC,CAAD,CAAA,GAAA;aAAO,WAAA,CAAY,WAAA,CAAY,CAAZ,CAAZ;IAAP;IACJ,EAAA,GAAK,WAAA,CAAY,MAAA,CAAO,CAAP,CAAA,CAAU,KAAV,CAAZ;WACL,CAAC,GAAD,CAAA,GAAA;aAAS,SAAA,CAAU,EAAA,CAAG,GAAH,CAAV;IAAT;EAT8B;AAAf;;AAUjB,QAAA,GAAW,cAAA,CAAe,UAAf;;AACX,SAAA,GAAY,cAAA,CAAe,WAAf;;AACZ,KAAA,GAAQ,CAAC,IAAD,CAAA,GAAA;AACR,MAAA;EAAE,CAAA,GAAI,WAAA,CAAY,WAAA,CAAY,IAAZ,CAAZ;SACJ,CAAC,OAAD,CAAA,GAAA;WAAa,OAAA,CAAQ,CAAR;EAAb;AAFM;;AAIR,SAAA,GAAY,CAAC,OAAO,EAAR,CAAA,GAAA;SAAe,CAAC,MAAD,CAAA,GAAA;AAC3B,QAAA;IAAE,IAAG,CAAI,KAAK,CAAC,OAAN,CAAc,MAAd,CAAP;AACE,aADF;;IAEA,CAAA,GAAI,CAAA;IACJ,IAAI,CAAC,OAAL,CAAa,CAAC,GAAD,EAAM,CAAN,CAAA,GAAA;MACX,IAAG,MAAM,CAAC,CAAD,CAAN,KAAe,MAAlB;eAAiC,CAAC,CAAC,GAAD,CAAD,GAAS,MAAM,CAAC,CAAD,EAAhD;;IADW,CAAb;WAEA;EANyB;AAAf;;AAQZ,YAAA,GAAe,CAAC,WAAW,EAAZ,CAAA,GAAA;SAAmB,QAAQ,CAAC,MAAM,CAAC,QAAR,CAAR,CAAA,CAA2B,CAAC,IAA5B,CAAA,CAAkC,CAAC;AAAtD;;AAEf,QAAA,GAAW,CAAC,CAAD,EAAI,SAAS,IAAb,CAAA,GAAA;EACT,IAAG,MAAH;WACE,KAAA,CAAC,WAAW,EAAZ,CAAA,GAAA;AACJ,UAAA,IAAA,EAAA,GAAA,EAAA,OAAA,EAAA;MAAM,IAAA,GAAO,QAAQ,CAAC,MAAM,CAAC,QAAR,CAAR,CAAA;AACP;aAAM,CAAI,CAAC,CAAA,GAAI,IAAI,CAAC,IAAL,CAAU,GAAV,CAAL,CAAmB,CAAC,IAA9B;QACE,GAAA,GAAM,CAAA,MAAM,CAAA,CAAE,CAAC,CAAC,KAAJ,CAAN;QACN,IAAG,WAAH;uBACE,KADF;SAAA,MAAA;AAGE,gBAHF;;MAFF,CAAA;;IAFF,EADF;GAAA,MAAA;WAUE,KAAA,CAAC,WAAW,EAAZ,CAAA,GAAA;AACJ,UAAA,IAAA,EAAA,GAAA,EAAA;MAAM,IAAA,GAAO,QAAQ,CAAC,MAAM,CAAC,QAAR,CAAR,CAAA;AACP,aAAM,CAAI,CAAC,CAAA,GAAI,IAAI,CAAC,IAAL,CAAU,GAAV,CAAL,CAAmB,CAAC,IAA9B;QACE,GAAA,GAAM,CAAA,MAAM,CAAA,CAAE,CAAC,CAAC,KAAJ,CAAN;QACN,IAAO,WAAP;AACE,gBADF;;MAFF;IAFF,EAVF;;AADS;;AAmBX,IAAA,GAAO,CAAC,EAAD,CAAA,GAAA;EACL,IAAG,CAAI,UAAA,CAAW,EAAX,CAAP;IACE,MAAM,IAAI,SAAJ,CAAc,4BAAd,EADR;;SAEA,CAAC,QAAQ,EAAT,CAAA,GAAA;WAAgB,UAAA,CAAW,MAAA,CAAO,EAAP,CAAA,CAAW,KAAX,CAAX;EAAhB;AAHK;;AAKP,OAAA,GAAU,CAAC,GAAD,CAAA,GAAA;EACR,IAAG,CAAI,GAAJ,YAAmB,GAAtB;IACE,MAAM,IAAI,SAAJ,CAAc,uBAAd,EADR;;SAEA,CAAC,IAAD,CAAA,GAAA;WAAU,CAAC,GAAD,CAAA,GAAA;AACZ,UAAA;MAAI,CAAA,GAAI,GAAG,CAAC,GAAJ,CAAQ,GAAR;;QACJ,IAAK;;MACL,CAAC,CAAC,IAAF,CAAO,IAAP;aACA,GAAG,CAAC,GAAJ,CAAQ,GAAR,EAAa,CAAb;IAJQ;EAAV;AAHQ,EA5JV;;;AAsKA,KAAA,GAAQ,CAAC,OAAD,CAAA,GAAA;SAAa,CAAC,MAAD,CAAA,GAAA;WACnB,IAAI,OAAJ,CAAY,CAAC,OAAD,CAAA,GAAA;aACV,UAAA,CAAW,CAAC,CAAA,CAAA,GAAA;eAAG,OAAA,CAAW,MAAA,KAAU,MAAb,GAA4B,OAA5B,GAAyC,MAAjD;MAAH,CAAD,CAAX,EACE,OADF;IADU,CAAZ;EADmB;AAAb;;AAKR,QAAA,GAAW,CAAC,OAAD,CAAA,GAAA;SAAa,CAAC,MAAD,CAAA,GAAA;;MACtB,SAAU,IAAI,KAAJ,CAAU,OAAV;;WACV,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,CAAA,GAAA;aACV,UAAA,CAAW,CAAC,CAAA,CAAA,GAAA;eAAG,MAAA,CAAO,MAAP;MAAH,CAAD,CAAX,EAA+B,OAA/B;IADU,CAAZ;EAFsB;AAAb;;AAKX,KAAA,GAAQ,CAAC,CAAD,CAAA,GAAA;AACR,MAAA;EAAE,IAAG,CAAI,UAAA,CAAW,CAAX,CAAP;IACE,MAAM,IAAI,SAAJ,CAAc,4BAAd,EADR;;EAEA,KAAA,GAAQ,IAAI,KAAJ,CAAU,gBAAV;SACR,CAAC,QAAQ,CAAT,CAAA,GAAA;IACE,KAAA,GAAQ,CAAC;IACT,IAAG,CAAG,CAAC,KAAA,IAAS,CAAV,CAAN;MACE,MAAM,IAAI,KAAJ,CAAU,gCAAV,EADR;;WAEA,CAAA,GAAI,IAAJ,CAAA,GAAA;AACJ,UAAA,CAAA,EAAA;MAAM,CAAA,GAAI;aACD,CAAA,CAAA,GAAI,CAAC,CAAD,CAAA,GAAA;QACL,IAAG,CAAA,EAAH;iBACE,OAAO,CAAC,OAAR,CAAA,CAAiB,CAAC,IAAlB,CAAuB,CAAA,CAAA,GAAA;mBAAG,CAAA,CAAE,GAAG,IAAL;UAAH,CAAvB,CACA,CAAC,KADD,CACO,CADP,EADF;SAAA,MAAA;iBAIE,OAAO,CAAC,MAAR,CAAe,CAAf,EAJF;;MADK,CAAJ,EAAS;IAFd;EAJF;AAJM;;AAiBR,OAAA,GAAU,CAAC,KAAD,CAAA,GAAA;EACR,IAAG,CAAI,CAAC,KAAA,IAAU,KAAK,CAAC,SAAhB,IAA8B,UAAA,CAAW,KAAX,CAA/B,CAAP;IACE,MAAM,IAAI,SAAJ,CAAc,yBAAd,EADR;;SAEA,CAAC,GAAD,EAAA,GAAS,IAAT,CAAA,GAAA;IACE,IAAG,GAAA,YAAe,KAAlB;aACE,IADF;KAAA,MAAA;aAEK,IAAI,KAAJ,CAAU,GAAV,EAAe,GAAG,IAAlB,EAFL;;EADF;AAHQ;;AAQV,YAAA,GAAe,CAAC,KAAD,EAAQ,cAAc,IAAtB,CAAA,GAAA;SAA+B,CAAC,OAAD,CAAA,GAAA;WAC5C,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,CAAA,GAAA;MACV,IAAG,CAAI,OAAP;AAAoB,eAAO,OAAA,CAAA,EAA3B;;MACA,IAAG,WAAH;QACE,OAAO,CAAC,EAAR,CAAW,WAAX,EAAwB,CAAA,GAAI,IAAJ,CAAA,GAAA;iBAAa,MAAA,CAAO,OAAP,EAAgB,GAAG,IAAnB;QAAb,CAAxB,EADF;;aAEA,OAAO,CAAC,EAAR,CAAW,KAAX,EAAkB,CAAA,GAAI,IAAJ,CAAA,GAAA;eAAa,OAAA,CAAQ,OAAR,EAAiB,GAAG,IAApB;MAAb,CAAlB;IAJU,CAAZ;EAD4C;AAA/B;;AAQf,WAAA,GAAc;;AACd,WAAA,GAAc,CAAC,MAAD,CAAA,GAAA;EACZ,IAAG,MAAA,GAAS,WAAZ;WAA6B,YAA7B;GAAA,MAAA;WAA8C,CAAA,IAAK,EAAA,GAAK,IAAI,CAAC,KAAL,CAAW,MAAX,EAAxD;;AADY;;AAGd,kBAAA,GAAqB;EAAC,IAAA,EAAM,YAAP;EAAqB,MAAA,EAAQ;AAA7B;;AAErB,UAAA,GAAa,QAAA,CAAC,UAAU,kBAAX,CAAA;AACb,MAAA,IAAA,EAAA,MAAA,EAAA,QAAA,EAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,MAAA,EAAA,WAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,SAAA,EAAA,MAAA,EAAA;EAAE,CAAA,CAAC,IAAD,EAAO,MAAP,CAAA,GAAiB,MAAM,CAAC,MAAP,CAAc,CAAA,CAAd,EAAkB,kBAAlB,EAAsC,OAAtC,CAAjB;EACA,IAAA,GAAO,CAAC,IAAD;EACP,QAAA,GAAW;EACX,MAAA,GAAS;EACT,IAAA,GAAO;IAAC,MAAA,EAAQ;EAAT;EAEJ,CAAA,WAAA,GAAc,CAAA,CAAA,GAAA;AACnB,QAAA;IAAI,QAAA,GAAW,WAAA,CAAY,MAAZ;IACX,IAAG,QAAA,KAAY,IAAI,CAAC,MAApB;AAAgC,aAAhC;KAAA,MACK,IAAG,QAAA,GAAW,IAAI,CAAC,MAAnB;MACH,GAAA,GAAM,IAAI,IAAJ,CAAS,IAAI,WAAJ,CAAgB,QAAA,GAAW,IAAI,CAAC,iBAAhC,CAAT;MACN,IAAG,IAAH;QACE,GAAG,CAAC,GAAJ,CAAQ,IAAR,EADF;OAFG;KAAA,MAAA;MAKH,GAAA,GAAM,IAAI,IAAJ,CAAS,IAAI,CAAC,MAAd,EAAsB,CAAtB,EAAyB,QAAzB,EALH;;WAML,IAAA,GAAO;EATQ,CAAd;EAWH,MAAA,GAAY,MAAH,GACP,CAAC,CAAD,EAAI,CAAJ,CAAA,GAAA;IACE,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAI,CAAC,CAAD;EADhB,CADO,GAKP,CAAC,CAAD,EAAI,CAAJ,CAAA,GAAA;IACE,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAI,CAAC,CAAD;IACd,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAI,CAAC,CAAD;EAFhB;EAKF,EAAA,GAAK,CAAC,CAAD,CAAA,GAAA;AACP,QAAA,CAAA,EAAA;IAAI,CAAA,GAAI,IAAI,CAAC,MAAD;IACR,CAAA,GAAI,CAAA,IAAK;AACT,WAAM,CAAA,IAAM,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAtB;MACE,MAAA,CAAO,CAAP,EAAU,CAAV;MACA,CAAA,GAAI;MACJ,CAAA,GAAI,CAAA,IAAK;IAHX;IAIA,IAAI,CAAC,CAAD,CAAJ,GAAU;AACV,WAAO;EARJ;EAUL,MAAA,GAAY,MAAH,GACP,IADO,GAGP,CAAC,KAAD,EAAQ,CAAR,CAAA,GAAA;WAAc,IAAI,CAAC,CAAD,CAAJ,GAAU;EAAxB;EAEF,IAAA,GAAO,CAAC,GAAD,EAAM,KAAN,CAAA,GAAA;IACL,MAAA,IAAU;IACV,IAAG,MAAA,IAAU,QAAb;MACE,WAAA,CAAA,EADF;;IAEA,IAAI,CAAC,MAAD,CAAJ,GAAe;IACf,MAAA,CAAO,KAAP,EAAc,EAAA,CAAG,MAAH,CAAd;WACA;EANK;EAQP,SAAA,GAAY,CAAC,CAAD,CAAA,GAAA;AACd,QAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;IAAI,CAAA,GAAI,IAAI,CAAC,CAAD;IACR,CAAA,GAAI;IACJ,CAAA,GAAI;AACJ,WAAM,CAAA,GAAI,MAAV;MACE,CAAA,GAAO,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAI,CAAC,CAAA,GAAI,CAAL,CAAjB,GAA8B,CAA9B,GAAqC;MACzC,CAAA,IAAK;MACL,MAAA,CAAO,CAAP,EAAU,CAAV;MACA,CAAA,GAAI;MACJ,CAAA,GAAI,CAAA,IAAK;IALX;IAMA,IAAG,CAAA,GAAI,MAAP;MACE,MAAA,CAAO,CAAP,EAAU,EAAA,CAAG,CAAH,CAAV,EADF;;IAEA,MAAA,IAAU;IACV,IAAG,MAAA,GAAS,QAAA,GAAW,CAAvB;MACE,WAAA,CAAA,EADF;;WAEA;EAfU;EAiBZ,GAAA,GAAS,MAAH,GACJ,CAAA,CAAA,GAAA;IACE,IAAG,MAAA,GAAS,CAAZ;AACE,aAAO,OADT;;WAEA,SAAA,CAAA;EAHF,CADI,GAMJ,CAAA,CAAA,GAAA;AACJ,QAAA;IAAM,IAAG,MAAA,GAAS,CAAZ;AACE,aAAO,OADT;;IAEA,GAAA,GAAM,CAAC,IAAI,CAAC,CAAD,CAAL,EAAU,IAAI,CAAC,CAAD,CAAd;IACN,SAAA,CAAU,IAAI,CAAC,MAAD,CAAd;IACA,IAAI,CAAC,GAAL,CAAA;WACA;EANF;EAQF,IAAA,GAAU,MAAH,GACL,CAAA,CAAA,GAAA;IACE,IAAG,MAAA,GAAS,CAAZ;aACE,OADF;KAAA,MAAA;aAEK,IAAI,CAAC,CAAD,EAFT;;EADF,CADK,GAML,CAAA,CAAA,GAAA;IACE,IAAG,MAAA,GAAS,CAAZ;aACE,OADF;KAAA,MAAA;aAEK,CAAC,IAAI,CAAC,CAAD,CAAL,EAAU,IAAI,CAAC,CAAD,CAAd,EAFL;;EADF;SAKF,IAAA,GAAO,CAAC,IAAD,EAAO,GAAP,EAAY,IAAZ;AA7FI;;AA+Fb,QAAA,GAAW;;AAEX,MAAA,GAAY,CAAA,CAAC,QAAD,CAAA,GAAA;SAAc,CAAC,KAAD,CAAA,GAAA;WAAW,CAAC,IAAD,CAAA,GAAA;MACnC,IAAG,QAAA,GAAW,KAAd;eACE,KADF;OAAA,MAAA;eAGE,KAHF;;IADmC;EAAX;AAAd,CAAA,EAAC;;AAMb,eAAA,GAAkB,CAAC,UAAD,EAAa,KAAb,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,MAA1B,EAAkC,GAAlC,CAAA,GAAA;AAClB,MAAA,GAAA,EAAA,CAAA,EAAA;EAAE,CAAA,GAAI;EACJ,KAAA,uCAAA;;IAAA,CAAQ,CAAP,GAAA,CAAA,EAAA,GAAA,MAAD;EAAA;EACA,CAAA,oBAAI,KAAK,CAAE,gBAAP,GAAgB;;IACpB,IAAK;;EACL,MAAA,GAAS,CAAA,IAAK;EACd,GAAA,GAAM,MAAA,GAAS;;IACf,QAAS;;EACT,KAAK,CAAC,MAAN,GAAe;EACf,IAAA,GAAO,CAAA,CAAA,GAAA;WAAG,CAAA,GAAI,CAAC,CAAA,GAAI,CAAL,CAAA,GAAU;EAAjB;SAEP;IAAC,CAAC,OAAD,CAAA,GAAA;MACC,IAAG,CAAA,IAAK,MAAR;QACE,MAAM,IAAI,KAAJ,CAAU,MAAV,EADR;;MAEA,IAAA,CAAA;AACA,aAAc,KAAK,CAAC,CAAA,GAAI,GAAL,CAAnB;QAAA,IAAA,CAAA;MAAA;MACA,CAAA,IAAK;aACL,KAAK,CAAC,CAAA,GAAI,GAAL,CAAL,GAAiB;QAAE,EAAA,EAAI,CAAN;QAAS;MAAT;IANlB,CAAD;IAQA,CAAC,EAAD,CAAA,GAAA;AACF,UAAA,CAAA;IAAA;MAAI,CAAA,GAAI,EAAA,GAAK;MACT,GAAA,GAAM,KAAK,CAAC,CAAD;MACX,IAAU,GAAV;QAAA,CAAA,IAAK,EAAL;;MACA,KAAK,CAAC,CAAD,CAAL,GAAW;aACX;IALF,CARA;IAeA,CAAC,EAAD,CAAA,GAAA;AACF,UAAA;MAAI,CAAA,GAAI,EAAA,GAAK;aACT,KAAK,CAAC,CAAD;IAFP,CAfA;IAmBA,CAAA,CAAA,GAAA;aAAG;IAAH,CAnBA;;AAXgB;;AAiClB,OAAA,GAAU,CAAC,IAAD,EAAO,OAAP,EAAgB,UAAU,KAA1B,EAAiC,KAAjC,EAAwC,CAAxC,EAA2C,IAA3C,CAAA,GAAA;EACR,KAAA,GAAW,OAAH,GAAgB,IAAhB,GAA0B,IAAI,CAAC,KAAL,CAAA;EAClC,CAAA,GAAI;EACJ,IAAA,GAAU,eAAH,GACL,CAAA,CAAA,GAAA;WAAG,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,CAAA,GAAA;MACb,CAAA,GAAI;aACJ,UAAA,CAAW,CAAC,CAAA,CAAA,GAAA;eAAG,MAAA,CAAO,OAAP;MAAH,CAAD,CAAX,EAAgC,OAAhC;IAFa,CAAZ;EAAH,CADK,GAIF,CAAA,CAAA,GAAA;WAAG,IAAI,OAAJ,CAAY,CAAC,OAAD,CAAA,GAAA;aAAa,CAAA,GAAI;IAAjB,CAAZ;EAAH;SACL;IAAE,MAAA,SAAA,CAAA,CAAA;AACJ,UAAA;AAAI,aAAM,IAAN;AACE,eAAM,KAAK,CAAC,MAAZ;UACE,MAAM,KAAK,CAAC,GAAN,CAAA;QADR;QAEA,GAAA,GAAM,CAAA,MAAM,IAAA,CAAA,CACZ,CAAC,KADW,CACL,CAAC,CAAD,CAAA,GAAA;iBACL,IAAI,KAAJ,CAAU,CAAV;QADK,CADK,CAAN;QAGN,IAAG,GAAA,YAAe,KAAlB;UACE,CAAA,GAAI;UACJ,MAAM,IAFR;;MANF;IADA,CAAF;IAYA,CAAC,CAAD,CAAA,GAAA;MACE,KAAK,CAAC,IAAN,CAAW,CAAX;;QACA;;aACA,CAAA,GAAI;IAHN,CAZA;;AARQ;;AA0BV,OAAA,GAAU,MAAA,CAAO,CAAP,CAAA,CAAU,UAAA,CAAW,OAAX,EAAoB,KAApB,CAAV;;AAEV,QAAA,GAAW,MAAA,CAAO,CAAC,CAAR,CAAA,CAAW,UAAA,CAAW,OAAX,EAAoB,OAApB,CAAX;;AAEX,MAAM,CAAC,OAAP,GAAiB,CACf,QADe,EAEf,IAFe,EAGf,CAHe,EAIf,SAJe,EAKf,SALe,EAMf,UANe,EAOf,WAPe,EAQf,QARe,EASf,SATe,EAUf,KAVe,EAWf,QAXe,EAYf,KAZe,EAaf,IAbe,EAcf,SAde,EAef,YAfe,EAgBf,QAhBe,EAiBf,OAjBe,EAkBf,UAlBe,EAmBf,WAnBe,EAoBf,GApBe,EAqBf,UArBe,EAsBf,OAtBe,EAuBf,YAvBe,EAwBf,eAxBe,EAyBf,OAzBe,EA0Bf,OA1Be,EA2Bf,QA3Be,EA4Bf,MA5Be",
  "sourcesContent": [
    "identity = (x) => x\r\nNone = => undefined\r\n\r\nisType = (type) => (x) => typeof x is type\r\nisObject = isType 'object'\r\nisFunction = isType 'function'\r\n\r\nconcatArr = (arr, cur) => arr.concat if Array.isArray cur then cur else [cur]\r\n\r\nflatArray = (arr = []) => arr.reduce concatArr, []\r\n\r\nflatObject = (o) =>\r\n  res = {}\r\n  for key of o when o[key]? and o.hasOwnProperty key\r\n    if (isObject o[key]) and (not Array.isArray o[key])\r\n      Object.assign res, flatObject o[key]\r\n    else if not res[key]? then res[key] = o[key]\r\n  res\r\n\r\n# Synchronous function only\r\nisSymmetry = (f) =>\r\n  if not isFunction f\r\n    throw new TypeError 'Argument is not a Function'\r\n  (...args) =>\r\n    l = f ...args\r\n    r = f ...args.reverse()\r\n    l is r\r\n\r\nisIterable = (x) => isObject(x) and x[Symbol.iterator]\r\ngetIterator = (x) => x[Symbol.iterator]()\r\nisMultiIterable = (x) => isIterable(x) and not isSymmetry(getIterator) x\r\niterConstructor = (-> yield).prototype.constructor\r\nisGenerator = (g) => g and g.constructor is iterConstructor\r\nisGeneratorFunction = (g) => g and g[Symbol.toStringTag] is 'GeneratorFunction'\r\n\r\nmapList = (func) => (list) ->\r\n  for item from list\r\n    x = func list\r\n    if isIterable x\r\n      yield* x\r\n    else\r\n      yield x\r\n\r\ntco = (f) =>\r\n  if not isGeneratorFunction f\r\n    throw new TypeError 'Argument is not a GeneratorFunction'\r\n  (...args) =>\r\n    i = f ...args\r\n    loop\r\n      {value, done} = i.next()\r\n      if isGenerator value\r\n        i = value\r\n      else if done\r\n        break\r\n      else res = value\r\n    res\r\n\r\n# M constructs a Monad wrapping a deferred function using Promise\r\n# M(f) is lazy and reinvokable just like a plain function\r\n# with .then and .catch methods like a Promise\r\n# Monad Laws:\r\n# f: a -> M b\r\n# g: b -> M c\r\n# unit(a).then f = f a\r\n# unit unit x = unit x\r\n# m.then(f).then(g) = m.then a -> f(a).then g\r\nM = do =>\r\n  # though this interface looks like Promise, but Promise isn't reinvokable,\r\n  # so we do not accept a Promise here\r\n  handler = (onFulfilled, onRejected) ->\r\n    if onFulfilled and not isFunction onFulfilled\r\n      throw new TypeError \"Parameter onFulfilled isn't a Function\"\r\n    if onRejected and not isFunction onRejected\r\n      throw new TypeError \"Parameter onRejected isn't a Function\"\r\n    if onFulfilled or onRejected\r\n      M (...args) => @(...args).then onFulfilled, onRejected\r\n    else\r\n      throw new TypeError 'Neither onFulfilled nor onRejected is a Function'\r\n\r\n  reject = (onRejected) -> @then null, onRejected\r\n\r\n  (f) =>\r\n    if not isFunction f\r\n      _t = f\r\n      f = => _t\r\n    if isFunction(f.then) and isFunction(f.catch)\r\n      return f\r\n    r = (...args) ->\r\n      await f ...args\r\n    Object.assign r,\r\n      # since M(f) is just a function and\r\n      # Promise.prototype.then will lift function to Promise, binding Promise as well.\r\n      # we use .then alias for both .map and .bind in a typical Monad\r\n      then: handler.bind r\r\n      catch: reject.bind r\r\n\r\nbindObject = (o, name) => o[name].bind o\r\n\r\nallPromise = bindObject Promise, 'all'\r\nracePromise = bindObject Promise, 'race'\r\n\r\ninvokeAsync = (func) => (args...) -> await func args...\r\n\r\nexpandApply = (func) => (arr = []) => func arr...\r\nmapArr = (func) => (arr) => arr.map func\r\nzipApplyArr = (a1) => (a2 = []) => a1.map (f, i) => f a2[i]\r\ninvokePromises = (predicate) => (funcs) =>\r\n  if not Array.isArray funcs\r\n    throw new TypeError 'Functions is not an Array'\r\n  if not funcs?.length\r\n    throw new TypeError 'Functions is empty'\r\n  if not funcs.every isFunction\r\n    throw new TypeError 'Some handler is not a Function'\r\n  g = (f) => expandApply invokeAsync f\r\n  fz = zipApplyArr mapArr(g) funcs\r\n  (arr) => predicate fz arr\r\nallAwait = invokePromises allPromise\r\nraceAwait = invokePromises racePromise\r\napply = (func) =>\r\n  f = expandApply invokeAsync func\r\n  (mapFunc) => mapFunc f\r\n\r\nmakeFrame = (keys = []) => (values) =>\r\n  if not Array.isArray values\r\n    return\r\n  o = {}\r\n  keys.forEach (key, i) =>\r\n    if values[i] isnt undefined then o[key] = values[i]\r\n  o\r\n\r\nfirstElement = (iterable = []) => iterable[Symbol.iterator]().next().value\r\n\r\nsequence = (f, memory = true) =>\r\n  if memory\r\n    (iterable = []) =>\r\n      iter = iterable[Symbol.iterator]()\r\n      while not (t = iter.next res).done\r\n        res = await f t.value\r\n        if res?\r\n          res\r\n        else\r\n          break\r\n  else\r\n    (iterable = []) =>\r\n      iter = iterable[Symbol.iterator]()\r\n      while not (t = iter.next res).done\r\n        res = await f t.value\r\n        if not res?\r\n          break\r\n      return\r\n\r\npall = (fn) =>\r\n  if not isFunction fn\r\n    throw new TypeError 'Argument is not a Function'\r\n  (items = []) => allPromise mapArr(fn) items\r\n\r\npushMap = (map) =>\r\n  if not map instanceof Map\r\n    throw new TypeError 'Argument is not a Map'\r\n  (item) => (key) =>\r\n    c = map.get key\r\n    c ?= []\r\n    c.push item\r\n    map.set key, c\r\n\r\n# Let setTimeout converts timeout parameter, no check here\r\ndelay = (timeout) => (result) =>\r\n  new Promise (resolve) =>\r\n    setTimeout (=> resolve if result is undefined then timeout else result)\r\n    , timeout\r\n\r\ndeadline = (timeout) => (reason) =>\r\n  reason ?= new Error timeout\r\n  new Promise (resolve, reject) =>\r\n    setTimeout (=> reject reason), timeout\r\n\r\nretry = (f) =>\r\n  if not isFunction f\r\n    throw new TypeError 'Argument is not a Function'\r\n  noTry = new Error 'try count is 0'\r\n  (count = 1) =>\r\n    count = +count\r\n    if not(count >= 0)\r\n      throw new Error 'Retry count is negative or NaN'\r\n    (...args) =>\r\n      c = count\r\n      do g = (e = noTry) =>\r\n        if c--\r\n          Promise.resolve().then => f ...args\r\n          .catch g\r\n        else\r\n          Promise.reject e\r\n\r\ngenWrap = (Class) =>\r\n  if not (Class and Class.prototype and isFunction Class)\r\n    throw new TypeError 'Argument is not a Class'\r\n  (obj, ...rest) =>\r\n    if obj instanceof Class\r\n      obj\r\n    else new Class obj, ...rest\r\n\r\neventPromise = (event, eventReject = null) => (emitter) =>\r\n  new Promise((resolve, reject) =>\r\n    if not emitter then return resolve()\r\n    if eventReject\r\n      emitter.on(eventReject, (...args) => reject(emitter, ...args))\r\n    emitter.on(event, (...args) => resolve(emitter, ...args))\r\n  )\r\n\r\nMinCapacity = 128\r\ngetCapacity = (length) =>\r\n  if length < MinCapacity then MinCapacity else 1 << 32 - Math.clz32 length\r\n\r\ndefaultHeapOptions = {Type: Float64Array, simple: false}\r\n\r\nBinaryHeap = (options = defaultHeapOptions) ->\r\n  {Type, simple} = Object.assign {}, defaultHeapOptions, options\r\n  data = [null]\r\n  capacity = MinCapacity\r\n  length = 0\r\n  keys = {length: 0}\r\n\r\n  do newCapacity = =>\r\n    capacity = getCapacity length\r\n    if capacity is keys.length then return\r\n    else if capacity > keys.length\r\n      arr = new Type new ArrayBuffer(capacity * Type.BYTES_PER_ELEMENT)\r\n      if keys\r\n        arr.set keys\r\n    else\r\n      arr = new Type keys.buffer, 0, capacity\r\n    keys = arr\r\n\r\n  assign = if simple\r\n    (i, j) =>\r\n      keys[i] = keys[j]\r\n      return\r\n  else\r\n    (i, j) =>\r\n      keys[i] = keys[j]\r\n      data[i] = data[j]\r\n      return\r\n\r\n  up = (i) =>\r\n    k = keys[length]\r\n    j = i >> 1\r\n    while j and keys[j] > k\r\n      assign i, j\r\n      i = j\r\n      j = j >> 1\r\n    keys[i] = k\r\n    return i\r\n\r\n  insert = if simple\r\n    None\r\n  else\r\n    (value, i) => data[i] = value\r\n\r\n  push = (key, value) =>\r\n    length += 1\r\n    if length >= capacity\r\n      newCapacity()\r\n    keys[length] = key\r\n    insert value, up length\r\n    heap\r\n\r\n  removeMin = (v) =>\r\n    k = keys[1]\r\n    i = 1\r\n    j = 2\r\n    while j < length\r\n      t = if keys[j] > keys[j + 1] then 1 else 0\r\n      j += t\r\n      assign i, j\r\n      i = j\r\n      j = i << 1\r\n    if i < length\r\n      insert v, up i\r\n    length -= 1\r\n    if length < capacity / 2\r\n      newCapacity()\r\n    k\r\n\r\n  pop = if simple\r\n    =>\r\n      if length < 1\r\n        return undefined\r\n      removeMin()\r\n  else\r\n    =>\r\n      if length < 1\r\n        return undefined\r\n      res = [keys[1], data[1]]\r\n      removeMin data[length]\r\n      data.pop()\r\n      res\r\n\r\n  peek = if simple\r\n    =>\r\n      if length < 1\r\n        undefined\r\n      else keys[1]\r\n  else\r\n    =>\r\n      if length < 1\r\n        undefined\r\n      else [keys[1], data[1]]\r\n\r\n  heap = {push, pop, peek}\r\n\r\nlogLevel = 2\r\n\r\ngenLog = do (logLevel) => (level) => (func) =>\r\n  if logLevel > level\r\n    func\r\n  else\r\n    None\r\n\r\nnewMessageArray = (lengthBits, items, c, l, length, mod) =>\r\n  l = 0\r\n  (l++ if c) for c in items\r\n  c = items?.length - 1\r\n  c ?= 0\r\n  length = 1 << lengthBits\r\n  mod = length - 1\r\n  items ?= []\r\n  items.length = length\r\n  next = => c = (c + 1) | 0\r\n\r\n  [(message) =>\r\n    if l >= length\r\n      throw new Error 'Full'\r\n    next()\r\n    next()  while items[c & mod]\r\n    l += 1\r\n    items[c & mod] = { id: c, message }\r\n\r\n  (id) =>\r\n    p = id & mod\r\n    res = items[p]\r\n    l -= 1 if res\r\n    items[p] = undefined\r\n    res\r\n\r\n  (id) =>\r\n    p = id & mod\r\n    items[p]\r\n\r\n  => l\r\n  ]\r\n\r\nnewPool = (pool, timeout, inplace = false, queue, r, newP) =>\r\n  queue = if inplace then pool else pool.slice()\r\n  r = null\r\n  newP = if timeout?\r\n    => new Promise (resolve, reject) =>\r\n      r = resolve\r\n      setTimeout (=> reject timeout), timeout\r\n  else => new Promise (resolve) => r = resolve\r\n  [ ->\r\n    while true\r\n      while queue.length\r\n        yield queue.pop()\r\n      res = await newP()\r\n      .catch (e) =>\r\n        new Error e\r\n      if res instanceof Error\r\n        r = null\r\n        yield res\r\n    return\r\n\r\n  (w) =>\r\n    queue.push w\r\n    r?()\r\n    r = null]\r\n\r\n###eslint no-console: 0###\r\nlogInfo = genLog(1) bindObject console, 'log'\r\n\r\nlogError = genLog(-1) bindObject console, 'error'\r\n\r\nmodule.exports = {\r\n  identity,\r\n  None,\r\n  M,\r\n  concatArr,\r\n  flatArray,\r\n  flatObject,\r\n  invokeAsync,\r\n  allAwait,\r\n  raceAwait,\r\n  delay,\r\n  deadline,\r\n  retry,\r\n  pall,\r\n  makeFrame,\r\n  firstElement,\r\n  sequence,\r\n  pushMap,\r\n  isFunction,\r\n  isGenerator,\r\n  tco,\r\n  BinaryHeap,\r\n  genWrap,\r\n  eventPromise,\r\n  newMessageArray,\r\n  newPool,\r\n  logInfo,\r\n  logError,\r\n  genLog\r\n}"
  ]
}