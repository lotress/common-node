{
  "version": 3,
  "file": "testFramework.js",
  "sourceRoot": "",
  "sources": [
    "src\\testFramework.coffee"
  ],
  "names": [],
  "mappings": ";AAAA,IAAA,OAAA,EAAA,IAAA,EAAA,MAAA,EAAA,SAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,OAAA;EAAA;;AAAA,CAAA,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,CAAA,GAAkC,OAAA,CAAQ,UAAR,CAAlC;;AACA,OAAA,GAAU,CAAC,WAAD,CAAA,GAAA;SAAiB,CAAC,CAAD,CAAA,GAAA;IACzB,QAAA,CAAS,CAAA,KAAA,CAAA,CAAQ,WAAR,CAAoB,OAApB,CAAT;IACA,IAAc,SAAd;MAAA,QAAA,CAAS,CAAT,EAAA;;WACA;EAHyB;AAAjB;;AAKV,IAAA,GAAO,CAAC,WAAD,CAAA,GAAA;AACL,MAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,EAAA;EAAA,IAAA,GAAO,OAAA,CAAQ,WAAR;EACP,IAAA,GAAO;EACP,MAAA,GAAS,CAAA;AACT;EAAA,KAAA,UAAA;;;IACE,MAAO,CAAA,GAAA,CAAP,GAAiB,CAAA,CAAC,KAAD,CAAA,GAAA;aAAW,CAAA,GAAI,IAAJ,CAAA,GAAA;eAC1B,KAAA,CAAM,GAAG,IAAT,CACA,CAAC,KADD,CACO,IADP,CAEA,CAAC,IAFD,CAEM,CAAC,GAAD,CAAA,GAAA;iBACJ,IAAA,GAAO,IAAA,IAAS,CAAC,CAAC;QADd,CAFN;MAD0B;IAAX,CAAA,CAAH,CAAI,KAAJ;EADhB;SAOA,CAAC,MAAD,CAAA,GAAA;WACE,OAAO,CAAC,OAAR,CAAA,CACA,CAAC,IADD,CACM,CAAA,CAAA,GAAA;aAAG,MAAA,CAAO,MAAP;IAAH,CADN,CAEA,CAAC,IAFD,CAEM,CAAA,CAAA,GAAA;MACJ,IAAG,IAAH;eACE,OAAA,CAAQ,CAAA,KAAA,CAAA,CAAQ,WAAR,CAAoB,OAApB,CAAR,EADF;OAAA,MAAA;eAEQ,IAAH,CAAA,EAFL;;IADI,CAFN,CAMA,CAAC,KAND,CAMO,IANP;EADF;AAXK;;AAoBP,MAAA,GAAS,KAAA,CAAC,IAAD,EAAO,UAAU,eAAjB,CAAA,GAAA;EACP,IAAA,GAAO,CAAA,MAAM,IAAN;EACP,IAAG,CAAI,IAAP;IAAiB,MAAM,IAAI,KAAJ,CAAU,OAAV,EAAvB;;SACA;AAHO;;AAKT,SAAA,GAAY,CAAA,CAAA,GAAA;AACV,MAAA;EAAA,KAAA,GAAQ,CAAC;SACT,KAAA,CAAC,CAAD,EAAI,UAAU,gBAAd,CAAA,GAAA;IACE,CAAA,GAAI,CAAA,MAAM,CAAN;IACJ,IAAG,KAAA,GAAQ,CAAX;MACE,MAAM,IAAI,KAAJ,CAAU,OAAV,EADR;KAAA,MAAA;MAGE,IAAG,QAAA,CAAS,CAAT,CAAA,IAAe,CAAA,KAAK,KAAvB;QAAqC,KAAA,GAAQ,CAAC,EAA9C;;aACA,KAJF;;EAFF;AAFU;;AAUZ,OAAA,GAAU,CAAA,CAAA,GAAA;SAAG;IAAC,MAAD;IAAS,SAAA,EAAc,SAAH,CAAA;EAApB;AAAH;;AAEV,MAAM,CAAC,OAAP,GAAiB",
  "sourcesContent": [
    "{logInfo, logError, isFunction} = require './common'\r\nlogFail = (description) => (e) =>\r\n  logError \"Test #{description} failed\"\r\n  logError e if e?\r\n  false\r\n\r\nTest = (description) =>\r\n  fail = logFail description\r\n  flag = true\r\n  report = {}\r\n  for own key, value of do Asserts\r\n    report[key] = do (value) => (...args) =>\r\n      value ...args\r\n      .catch fail\r\n      .then (res) =>\r\n        flag = flag and !!res\r\n\r\n  (testFn) =>\r\n    Promise.resolve()\r\n    .then => testFn report\r\n    .then =>\r\n      if flag\r\n        logInfo \"Test #{description} passed\"\r\n      else do fail\r\n    .catch fail\r\n\r\nassert = (flag, message = 'assert failed') =>\r\n  flag = await flag\r\n  if not flag then throw new Error message\r\n  true\r\n\r\nassertSeq = =>\r\n  count = -Infinity\r\n  (c, message = 'wrong sequence') =>\r\n    c = await c\r\n    if count > c\r\n      throw new Error message\r\n    else\r\n      if isFinite(c) or c is Infinity then count = +c\r\n      true\r\n\r\nAsserts = => {assert, assertSeq: do assertSeq}\r\n\r\nmodule.exports = Test\r\n"
  ]
}