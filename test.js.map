{
  "version": 3,
  "file": "test.js",
  "sourceRoot": "\\",
  "sources": [
    "src\\test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "Test = require './testFramework'\r\n_ = require './common'\r\n{\r\n  identity,\r\n  None,\r\n  isFunction,\r\n  delay,\r\n  deadline,\r\n  retry,\r\n  allAwait,\r\n  raceAwait,\r\n  sequence,\r\n  isGenerator,\r\n  tco,\r\n  BinaryHeap,\r\n  genWrap,\r\n  genLog,\r\n  logInfo,\r\n  logError,\r\n  newMessageArray,\r\n  newPool\r\n} = _\r\n\r\nlogInfo = genLog 2\r\n\r\nTest('lazy Monad') ({assert, assertSeq}) =>\r\n  status = 1\r\n  seq = 3\r\n  res = []\r\n  f = _.M (x) => x + 1\r\n  .then (x) =>\r\n    assertSeq ++seq\r\n    x\r\n  .then (x) => assert x is 2\r\n  .then => assert status is 2\r\n  .then =>\r\n    throw new Error 'wrong'\r\n  .then => assert false\r\n  .catch (e) => assert e.message is 'wrong'\r\n  .then => assertSeq ++seq\r\n\r\n  res.push assertSeq 1\r\n\r\n  res.push f 1\r\n\r\n  res.push assertSeq 2\r\n  status = 2\r\n\r\n  r = f 1\r\n  .then => assertSeq Infinity\r\n  res.push r\r\n\r\n  res.push assertSeq 3\r\n  Promise.all res\r\n\r\nTest('Monad handler type check') (report) =>\r\n  try\r\n    f = _.M (x) => x + 1\r\n    .then null, logError\r\n    .then do Promise.resolve\r\n    .then => throw new Error 'wrong'\r\n    f 1\r\n  catch e\r\n    report.assert e instanceof TypeError\r\n\r\nTest('Immutable Monad') (report) =>\r\n  f = _.M identity\r\n  g = f.then => 1\r\n  h = f.then => 2\r\n  Promise.all [f, g, h].map (fn, i) =>\r\n    fn i\r\n    .then (x) => report.assert x is i\r\n\r\nTest('identity') (report) =>\r\n  x = {}\r\n  Promise.all [\r\n    report.assert x is identity.apply @, [x, 1]\r\n    report.assert undefined is do identity\r\n  ]\r\n\r\nTest('None') (report) =>\r\n  x = {}\r\n  Promise.all [\r\n    report.assert undefined is None.apply @, [x, {}]\r\n    report.assert undefined is do None\r\n  ]\r\n\r\nTest('wait with delay and deadline') (report) =>\r\n  start = Date.now()\r\n  timing = (time) => do delay time\r\n  interval = (k) => (time) =>\r\n    time = time.message if time.message?\r\n    report.assert Date.now() - start >= time * k\r\n    time\r\n  f = _.M timing\r\n  .then interval 1\r\n  .then timing\r\n  .then interval 2\r\n  .then (time) => do deadline time\r\n  .catch interval 3\r\n\r\n  f 100\r\n\r\nTest('death race') ({assert}) =>\r\n  life = 1000\r\n  f = (time) =>\r\n    a = allAwait [identity, delay(time), delay time * 2]\r\n    g = _.M a\r\n    .then None\r\n    .then a\r\n    .then None\r\n    .then a\r\n    .then =>\r\n      assert Date.now() - start >= time * 6\r\n    h = raceAwait [g, deadline life]\r\n    logInfo \"race began with time interval #{time}ms\"\r\n    start = Date.now()\r\n    h().then =>\r\n      assert Date.now() - start < life\r\n      logInfo \"after #{Date.now() - start}ms,\r\n        should resolve when time interval < #{life} / 6\"\r\n    .catch (e) =>\r\n      e = +e.message\r\n      assert e is life\r\n      assert Date.now() - start >= e\r\n      logInfo \"after #{Date.now() - start}ms,\r\n        should reject when time interval > #{e} / 6\"\r\n\r\n  Promise.all [\r\n    f 100\r\n    f 200\r\n  ]\r\n\r\nTest('retry') ({assert}) =>\r\n  f = do (times = 3) => (count = 0) => =>\r\n    count += 1\r\n    if count < times\r\n      throw new Error \"#{count} < #{times}\"\r\n    return count\r\n\r\n  g = retry(f()) 3\r\n\r\n  Promise.all [\r\n    retry(f())(2)()\r\n    .then => assert false\r\n    .catch (e) => assert e.message is '2 < 3'\r\n\r\n    g()\r\n    .then (r) => assert r is 3\r\n    .catch => assert false\r\n\r\n    delay(1000)()\r\n    .then g\r\n    .then (r) => assert r is 4\r\n    .catch => assert false\r\n  ]\r\n\r\nTest('sequence') ({assert, assertSeq}) =>\r\n  number = ->\r\n    n = 1\r\n    k = 1\r\n    while true\r\n      k = yield n + k\r\n    return\r\n\r\n  f = (x) ->\r\n    if x < 5\r\n      assertSeq x\r\n      x\r\n    else undefined\r\n\r\n  g = (x) ->\r\n    delay(1000)()\r\n    .then => f x\r\n\r\n  s = sequence(g) number()\r\n  Promise.all [\r\n    assertSeq 0\r\n    a = await s\r\n    assert a.every (x, i) => x is i + 2\r\n  ]\r\n\r\nTest('isGenerator') (report) =>\r\n  number = ->\r\n    n = 1\r\n    while true\r\n      yield n++\r\n    return\r\n\r\n  Promise.all [\r\n    report.assert not isGenerator number\r\n    report.assert isGenerator number()\r\n  ]\r\n\r\nTest('tail call optimization') ({assert}) =>\r\n  countFn = (n, res = 0) ->\r\n    if n <= 1\r\n      yield res + n\r\n    else\r\n      yield countFn(n - 1, res + 1)\r\n\r\n  countR = (n) =>\r\n    if n <= 1 then n\r\n    else 1 + countR n - 1\r\n\r\n  try\r\n    tco identity\r\n    await assert false\r\n  catch e\r\n    await assert e.name is 'TypeError'\r\n\r\n  count = tco countFn\r\n\r\n  await assert count 1e7\r\n\r\n  try\r\n    countR 1e7\r\n    await assert false\r\n  catch e\r\n    await assert e.name is 'RangeError'\r\n\r\nTest('Priority Queue') ({assert}) =>\r\n  queue = [2, 1, 4].reduce ((queue, x) => queue.push x)\r\n  , new BinaryHeap simple: true\r\n  assert isFunction queue.push\r\n  assert isFunction queue.peek\r\n  assert isFunction queue.pop\r\n  queue.push 3\r\n  assert queue.peek() is 1\r\n  assert [1, 2, 3, 4].reduce ((flag, x) => flag and x is queue.pop())\r\n  , true\r\n  N = 1e6\r\n  data = ({v: Math.random()} for i in [1..N])\r\n  compare = (a, b) => a.v - b.v\r\n  queue = new BinaryHeap()\r\n  console.time \"Heapsort #{N}\"\r\n  data.forEach (x) => queue.push x.v, x\r\n  res1 = (queue.pop() for i in [1..N])\r\n  console.timeEnd \"Heapsort #{N}\"\r\n  console.time \"Array sort #{N}\"\r\n  resA = data.sort compare\r\n  console.timeEnd \"Array sort #{N}\"\r\n  assert resA.every (item, i) => item is res1[i][1]\r\n\r\nTest('Wrapper Generator') ({assert}) =>\r\n  f = (x) ->\r\n    @x = x.length\r\n    return\r\n  w = genWrap f\r\n  r = w 'aaa'\r\n  rr = w r\r\n  assert r.x is 3\r\n  assert r is rr\r\n  try\r\n    genWrap 'wrong'\r\n    assert false\r\n  catch e\r\n    assert e instanceof TypeError\r\n\r\nTest('Message Array') ({assert}) =>\r\n  items = []\r\n  [newItem, popItem, peek] = newMessageArray 2, items\r\n  newItem() for i in [1..4]\r\n  id = items[2].id\r\n  t = peek id\r\n  assert items[2] is t\r\n  item = popItem id\r\n  assert item.id is id\r\n  assert t.id is id\r\n  assert items[2] is undefined\r\n  item = popItem id\r\n  assert item is undefined\r\n  item = newItem()\r\n  assert (item.id & 3) is 2\r\n  assert item.id > 2\r\n  try\r\n    newItem()\r\n    assert false\r\n  catch e\r\n    assert e.message is 'Full'\r\n\r\nTest('Pool') ({assert, idle}) =>\r\n  pool = [1, 2, 3]\r\n  s = new Set()\r\n  [ac, release] = newPool pool\r\n  acquire = do (g = do (o = ac()) => o.next.bind o) => => (await g()).value\r\n  c = 0\r\n  timeout = 20\r\n  d = delay(timeout)\r\n  times = 99\r\n  f = =>\r\n    if c > times\r\n      return\r\n    c += 1\r\n    v = await acquire()\r\n    assert not s.has v\r\n    s.add v\r\n    d()\r\n    .then ->\r\n      assert s.has v\r\n      s.delete v\r\n      release v\r\n      f()\r\n  await idle()\r\n  start = Date.now()\r\n  Promise.all [f(), f(), f()]\r\n  .then => Date.now() - start\r\n  .then (elapse) =>\r\n    assert elapse * 3 >= timeout * times > elapse * 2\r\n\r\nTest('Pool with timeout') ({assert}) =>\r\n  pool = [1, 2, 3]\r\n  s = new Set pool\r\n  [ac, release] = newPool pool, 10, true\r\n  acquire = do (g = do (o = ac()) => o.next.bind o) => => (await g()).value\r\n  c = 0\r\n  f = =>\r\n    res = await acquire()\r\n    if res instanceof Error\r\n      c = 1\r\n      assert pool.length is 0\r\n      assert +res.message is 10\r\n      return\r\n    await delay(20)()\r\n    assert s.has res\r\n    s.delete res\r\n    release res\r\n  Promise.all (f() for _ in [1..4])\r\n  .then =>\r\n    assert s.size is 0\r\n    assert c is 1"
  ]
}